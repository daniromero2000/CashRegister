<?php

namespace Tests\Unit\app\Entities\Payments\UseCases;

use App\Repositories\Interfaces\CashRegisters\CashRegisterRepositoryInterface;
use App\Repositories\Interfaces\Payments\PaymentRepositoryInterface;
use App\Repositories\Interfaces\TransactionLogs\TransactionLogRepositoryInterface;
use App\UseCases\Payments\PaymentUseCase;
use Monolog\Test\TestCase;

/**
 * Class PaymentUseCaseTest
 * @package Tests\Unit\app\Entities\Payments\UseCases
 */
class PaymentUseCaseTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws \PHPUnit\Framework\ExpectationFailedException
     * @throws \SebastianBergmann\RecursionContext\InvalidArgumentException
     * This function aims to simulate an exception at the time of creating a payment
     */
    public function testCreatePaymentUseCaseError(): void
    {
        $paymentRepositoryMock = \Mockery::mock(PaymentRepositoryInterface::class);
        $transactionLogRepositoryMock = \Mockery::mock(TransactionLogRepositoryInterface::class);
        $cashRegisterRepositoryMock = \Mockery::mock(CashRegisterRepositoryInterface::class);

        $paymentUseCase = new PaymentUseCase(
            $paymentRepositoryMock,
            $cashRegisterRepositoryMock,
            $transactionLogRepositoryMock
        );

        $request = $paymentUseCase->createPayment(['createPayment']);

        $this->assertEquals(['status' => false, 'message' => 'Undefined index: customer_payment'], $request);
    }
}
