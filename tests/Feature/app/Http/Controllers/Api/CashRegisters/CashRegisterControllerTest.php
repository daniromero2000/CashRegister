<?php

namespace Tests\Feature\app\Http\Controllers\Api\CashRegisters;

use App\Entities\CashRegisters\CashRegister;
use App\Entities\CashRegisters\Repositories\Interfaces\CashRegisterRepositoryInterface;
use App\Entities\Users\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;

/**
 * Class CashRegisterControllerTest
 * @package Tests\Feature\app\Http\Controllers\Api\CashRegisters
 * @author Daniel Romero - 123romerod@gmail.com
 */
class CashRegisterControllerTest extends TestCase
{
    use WithoutMiddleware, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreateMoneyBaseCashRegisterSuccess(): void
    {
        factory(User::class)->create([
            'id' => 1
        ]);

        $data = [
            'denomination' => 'bill',
            'value'        => '50000',
            'quantity'     => '1'
        ];

        $request = $this->post(route('cashRegister.create'), $data, ['Accept' => 'application/json']);

        $request->assertStatus(200);

        $this->assertDatabaseHas('cash_registers', $data);
    }

    public function testCreateMoneyBaseCashRegisterErrorFields(): void
    {
        $data = [];

        $request = $this->post(route('cashRegister.create'), $data, ['Accept' => 'application/json']);

        $request->assertStatus(422)
            ->assertJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'denomination' => [
                    'The denomination field is required.'
                ],
                'value' => [
                    'The value field is required.'
                ],
                'quantity' => [
                    'The quantity field is required.'
                ]
            ]
        ]);
    }

    public function testCreateMoneyBaseCashRegisterError(): void
    {
        $data = [
            'denomination' => 'bill',
            'value'        => '50000',
            'quantity'     => '1'
        ];

        $cashRegisterMock = \Mockery::mock(CashRegisterRepositoryInterface::class);

        $cashRegisterMock->shouldReceive('createOrUpdateCashRegister')
            ->withArgs($data)
            ->andThrow(new \Exception('data error'))
            ->getMock();

        $this->app->instance(CashRegisterRepositoryInterface::class, $cashRegisterMock);

        $request = $this->post(route('cashRegister.create'), $data, ['Accept' => 'application/json']);

        $request->assertStatus(500);
    }

    public function testCheckStatusCashRegisterSuccess(): void
    {
        factory(CashRegister::class, 10)->create();

        $request = $this->get(route('cashRegister.getStatus'), ['Accept' => 'application/json']);

        $request->assertStatus(200)->assertJsonStructure([
            'total_cash_register',
            'coin',
            'total_coin',
            'bill',
            'total_bill'
        ]);

    }

    public function testWithdrawAllMoneyCashRegisterSuccess(): void
    {
        factory(CashRegister::class, 10)->create();

        $request = $this->get(route('cashFlow.withdrawAllMoney'), ['Accept' => 'application/json']);

        $request->assertStatus(200);
    }


    public function testWithdrawAllMoneyCashRegisterError(): void
    {
        $request = $this->get(route('cashFlow.withdrawAllMoney'), ['Accept' => 'application/json']);

        $request->assertStatus(500);
    }
}
