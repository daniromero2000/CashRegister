<?php

namespace Tests\Feature\app\Http\Controllers\Api\TransactionLogs;

use App\Entities\CashRegisters\CashRegister;
use App\Entities\TransactionLogs\TransactionLog;
use App\Entities\Users\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;

/**
 * Class TransactionLogControllerTest
 * @package Tests\Feature\app\Http\Controllers\Api\TransactionLogs
 * @author Danier Romero - 123romerod@gmail.com
 */
class TransactionLogControllerTest extends TestCase
{
    use WithoutMiddleware, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function createDataForTests()
    {
        factory(User::class)->create([
            'id' => 1
        ]);

        $cashRegister = factory(CashRegister::class)->create();

        $log = factory(TransactionLog::class)->create([
            'value' => $cashRegister->value
        ]);

        $cashRegister->transactionLogs()->attach($log,
            [
                'cash_register_quantity' => $cashRegister->quantity,
                'user_id' => 1
            ]);

        return $log;
    }

    public function testListTransactionLogSuccess(): void
    {
        $this->createDataForTests();

        $request = $this->get(route('transactionLog.getLogs'), ['Accept' => 'application/json']);

        $request->assertStatus(200)->assertJsonStructure([
            [
                'type',
                'value',
                'movements'
            ]
        ]);
    }

    public function testListTransactionLogError(): void
    {
        $request = $this->get(route('transactionLog.getLogs'), ['Accept' => 'application/json']);

        $request->assertStatus(500);
    }

    public function testGetStatusByDateSuccess(): void
    {
        $data = $this->createDataForTests();

        $request = $this->get(route('transactionLog.getStatusByDate', $data->created_at), ['Accept' => 'application/json']);

        $request->assertStatus(200)->assertJsonStructure([
            'total_cash_register'
        ]);
    }

    public function testGetStatusByDateError(): void
    {
        $request = $this->get(
            route('transactionLog.getStatusByDate', '2021-02-07 17:24:09'),
            ['Accept' => 'application/json']);

        $request->assertStatus(500);
    }

    public function testGetStatusByDateNotFound(): void
    {
        $request = $this->get(
            route('transactionLog.getStatusByDate', ''),
            ['Accept' => 'application/json']);

        $request->assertStatus(404);
    }

}
